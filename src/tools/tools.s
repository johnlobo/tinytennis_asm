.module tools

.include "../defines.h"

.area _DATA

.area _CODE

.include "../cpctelera.h"

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  FUNC: clear screen
;;      Clears the screen
;; 
;;  Input Parameters (5 Bytes)
;;  2B HL) array	Pointer to the first byte of the array to be filled up (starting point in memory)
;;  2B DE) value	16-bit value to be set (Pair of bytes)
;;  2B BC) size	Number of bytes to be set (>= 64, multiple of 64)
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

clear_screen::
    ld hl, #pvideomem
    ld de, #0000
    ld bc, #4000
    call cpct_memset_f64_asm
    ret

;;i16 sign(i16 x)
;;{
;;    return  (x > 0) - (x < 0);
;;}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;  FUNC: sign
;;      Returns 1 or -1 depending on the sign of the parameter
;; 
;;  INPUT: DE 
;;    
;;  OUTPUT: in HL sign
;;  
;;  DESTROYS:
;;      A, HL, DE 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

sign::
    ld hl, #0000        ;; set hl = 0
    bit 7,d             ;; check if DE is positive or negative 
    jr z, positive      ;; if bit 7 = 0 > postive
    dec l               ;; else dec l and return
    ret
positive:
    inc l               ;; if it's positive inc l and return
    ret
    
;;
;;  multiply
;;
;;  input: A: Multiplicand
;;         B: Multiplier
;;  output: A: result
;;  destroys: A, BC
;; 

multiply::
    dec b
    ld c,a
loop:
    add c
    djnz loop
    ret

;===================================
; Divide
;===================================
;
;Inputs:
;    A=divisor
;    C=dividend
;
;Outputs:
;    B=A/C
;    A=A%C    (the remainder)
;

divide::
 ld b,#0
divLoop:
 sub A,C
 jr c,divEnd
 inc B
 jr divLoop

divEnd:
 add a,c
 ret
 
 
CPCTM_MASKTABLE0M0::
    .db 0xFF, 0xAA, 0x55, 0x00, 0xAA, 0xAA, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0xAA, 0xAA, 0x00, 0x00, 0xAA, 0xAA, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x55, 0x00, 0x55, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 
    .db 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00